Working Django From Docs


There are files when you created the django project for the first time

manage.py : A command-line utility that lets yoy interact with this Django project in various ways.

__init__.py : An empty file that tells Python that this directory should be considered a Python package

settings.py : Setting/Configuration for this Django project.Setting file contains all the configuration of your Django installation

urls.py : The URL declarations for this project. A clean elegant URL scheme is an important detail in High quality web application

asgi.py : An entry point for ASGI-compatible web servers to your serve your project

wsgi.py : An entry point for WSGI-compatible web servers to serve your project


Now when you create your project Django comes with a utility that automatically generates the basic directory structure of an app,
so you can focus on writing code rather than creating directories.

Projects vs. apps

What’s the difference between a project and an app? An app is a web application that does something – e.g., 
a blog system, a database of public records or a small poll app. 
A project is a collection of configuration and apps for a particular website. 
A project can contain multiple apps. An app can be in multiple projects.

When to use include()

You should always use include() when you include other URL patterns. admin.site.urls is the only exception to this.

The path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name. 
At this point, it’s worth reviewing what these arguments are for.

Use of URls in Django 
Apps and Projects are different things we have a app named polls and Django have a system to take everything in Order
so in our app if we want to reach we need a URL but... Let me give a example
So our app named polls we can add,delete and update(Lets think polls have this  functionaries) ne can't reach different 
functions in one URL like so we use(mostly) polls/add or polls/delete so for every function that app have have different function
Django find a solution to make more tidy order let us to create the URLs in our app(We don't have to of course) and we only include the 
URL the project to access everything in our app.





Part 2

Writing first Django Apps


By default the configuration uses SQLLite. 


For databases other than SQLite

If you’re using a database besides SQLite, make sure you’ve created a database by this point. Do that with “CREATE DATABASE database_name;” within your database’s interactive prompt.

Also make sure that the database user provided in mysite/settings.py has “create database” privileges. This allows automatic creation of a test database which will be needed in a later tutorial.

If you’re using SQLite, you don’t need to create anything beforehand - the database file will be created automatically when it is needed.

By default, INSTALLED_APPS contains the following apps, all of which come with Django:

django.contrib.admin – The admin site. You’ll use it shortly.
django.contrib.auth – An authentication system.
django.contrib.contenttypes – A framework for content types.
django.contrib.sessions – A session framework.
django.contrib.messages – A messaging framework.
django.contrib.staticfiles – A framework for managing static files.


Creating models

A model is the single, definitive source of information about your data. 
It contains the essential fields and behaviors of the data you’re storing. Django follows the DRY Principle. 
The goal is to define your data model in one place and automatically derive things from it.

We'll create two models Question and Choice :
A Question has a question and a publication date.
A Choice has two filed the text of the choice and a vote tally Each Choice associated with a Question

Each model is represented by a class that subclasses django.db.models.Model.
Each model has a number of class variables, each of which represents a database field in the model



Activating Models 

Philosophy

Django apps are “pluggable”: You can use an app in multiple projects, and you can distribute apps, because 
they don’t have to be tied to a given Django installation.


To include the app in our project we need to add a reference to its configuration class in hte INSTALLED_APPS
setting. The PollsConfig class in the polls/apps.py file 

Now Django knows to include the polls app

python manage.py makemigrations polls

By runnig makemigrations you are telling Django that you have made some changes to your models 

The three step guide to making model changes

1- Change your models(in models.py)
2- run python manage.py makemigrations to create migrations for those changes
3- run python manage.py migrate to apply those changes to the database


Playing with the API


Lets's hop into the interactive Python shell and play around with free API Django gives you 

python manage.py shell


Part 4 


These views represent a common case of basic web development: getting data from the database according to a parameter passed in the URL, 
loading a template and returning the rendered template. 
Because this is so common, Django provides a shortcut, called the “generic views” system.

Let’s convert our poll app to use the generic views 
system, so we can delete a bunch of our own code. We’ll have to take a few steps to make the conversion. We will:

Convert the URLconf.
Delete some of the old, unneeded views.
Introduce new views based on Django’s generic views.

Why the code-shuffle?

Generally, when writing a Django app, 
you’ll evaluate whether generic views are a good fit for your problem, and you’ll use them from the beginning, 
rather than refactoring your code halfway through. But this tutorial intentionally has 
focused on writing the views “the hard way” until now, to focus on core concepts.

Amend URLconf

Amend Views

We’re using two generic views here: ListView and DetailView. Respectively, 
those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.

By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. 
In our case, it would use the template "polls/question_detail.html". 
The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. 
We also specify the template_name for the results list view – this ensures that the results view and the detail view have a 
different appearance when rendered, even though they’re both a DetailView behind the scenes.

Similarly, the ListView generic view uses a default 
template called <app name>/<model name>_list.html; we use template_name to tell ListView to use our existing "polls/index.html" template.